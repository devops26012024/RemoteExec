
The following manifest creates a ClusterRoleBinding that assigns the admin ClusterRole to the user john_doe at the cluster level.


---

YAML Manifest

Save this as admin-clusterrolebinding.yaml:

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-binding-john-doe
subjects:
- kind: User
  name: john_doe
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io


---

Explanation of the YAML Manifest

1. kind: ClusterRoleBinding:

Grants cluster-wide permissions to the specified user.



2. metadata.name:

Unique name for the ClusterRoleBinding, in this case, admin-binding-john-doe.



3. subjects:

kind: User: Specifies the type of subject (e.g., User for users, Group for groups).

name: john_doe: The username to bind the ClusterRole to.



4. roleRef:

kind: ClusterRole: Refers to the admin ClusterRole.

name: admin: The name of the ClusterRole being assigned.





---

Steps to Apply the ClusterRoleBinding

1. Save the manifest to a file:

vi admin-clusterrolebinding.yaml


2. Apply the ClusterRoleBinding:

kubectl apply -f admin-clusterrolebinding.yaml


3. Verify the ClusterRoleBinding is created:

kubectl get clusterrolebinding admin-binding-john-doe


4. Describe the ClusterRoleBinding:

kubectl describe clusterrolebinding admin-binding-john-doe




---

Testing the Permissions

Switch to john_doe's Context

Use the kubeconfig file for john_doe (if configured) to test access.

Test Full Cluster Access

Run the following commands:

kubectl --kubeconfig=john_doe.kubeconfig get pods --all-namespaces
kubectl --kubeconfig=john_doe.kubeconfig create namespace test-namespace
kubectl --kubeconfig=john_doe.kubeconfig delete namespace test-namespace

If the admin ClusterRole is correctly bound, john_doe should be able to perform any operation across all namespaces.


Step 2: Sign the CSR with Kubernetes' CA

# Sign the CSR with the cluster's CA
openssl x509 -req -in jane_doe.csr \
  -CA /etc/kubernetes/pki/ca.crt \
  -CAkey /etc/kubernetes/pki/ca.key \
  -CAcreateserial \
  -out jane_doe.crt \
  -days 365

This generates the signed certificate jane_doe.crt.


---

Step 3: Create a Kubeconfig File for jane_doe

Create a jane_doe.kubeconfig file:

apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /etc/kubernetes/pki/ca.crt
    server: https://<cluster-api-server>:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: jane_doe
  name: jane_doe-context
current-context: jane_doe-context
users:
- name: jane_doe
  user:
    client-certificate: jane_doe.crt
    client-key: jane_doe.key

Save the file and distribute it to jane_doe.


---

Step 4: Create RBAC Role and RoleBinding

Create a Role for Read-Only Access

Save the following as read-only-role.yaml:

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: read-only
  namespace: development
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

Apply the Role:

kubectl apply -f read-only-role.yaml

Create a RoleBinding for jane_doe

Save the following as read-only-rolebinding.yaml:

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: read-only-binding
  namespace: development
subjects:
- kind: User
  name: jane_doe
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: read-only
  apiGroup: rbac.authorization.k8s.io

Apply the RoleBinding:

kubectl apply -f read-only-rolebinding.yaml


---

Step 5: Verify the Binding

Switch to jane_doe's Kubeconfig

Test access using jane_doe's kubeconfig:

kubectl --kubeconfig=jane_doe.kubeconfig get pods -n development

If successful, youâ€™ll see the list of Pods in the development namespace.

Any other actions (e.g., creating Pods) will be denied due to the Role's restrictions.


Check the RoleBinding

Verify that the RoleBinding is in place:

kubectl get rolebinding -n development
kubectl describe rolebinding read-only-binding -n development

Simulate Other Actions

Try an unauthorized action to confirm the Role's restrictions:

kubectl --kubeconfig=jane_doe.kubeconfig create pod mypod -n development

This should return a permission error, confirming the RoleBinding is working correctly.

1. Verify CNI plugin compatibility.

kubectl describe nodes | grep -i cni

2. Ensure NetworkPolicy definitions are correct.

kubectl get networkpolicy -n <namespace>
kubectl describe networkpolicy <policy-name> -n <namespace>


3. Check Pod labels and selectors.

Verify that the podSelector, policyTypes, and ingress/egress rules are correct.

kubectl get pods --show-labels -n <namespace>

Ensure the labels in the podSelector of the NetworkPolicy match the actual Pod labels.

4. Test Pod Connectivity Without NetworkPolicies

Reason: The issue might not be related to NetworkPolicies but to other networking problems.

Action:

Temporarily remove all NetworkPolicies in the namespace:

kubectl delete networkpolicy --all -n <namespace>

Test communication between Pods:

kubectl exec -it <pod-name> -- ping <destination-pod-ip>

If connectivity works after removing NetworkPolicies, the issue lies in the policies themselves.




---

5. Verify Pod IPs and DNS Resolution

Reason: Pods might be trying to communicate with incorrect IPs or DNS names.

Action:

Get the Pod IPs:

kubectl get pods -o wide -n <namespace>

Test direct communication using IP:

kubectl exec -it <pod-name> -- ping <destination-pod-ip>

Test DNS resolution:

kubectl exec -it <pod-name> -- nslookup <destination-service>




---

6. Verify Traffic Flow with Tools

Reason: Tools like tcpdump and curl can help diagnose connectivity issues.

Action:

Install curl or netcat in the Pod (if not available):

kubectl exec -it <pod-name> -- apk add curl

Test specific ports using curl or nc:

kubectl exec -it <pod-name> -- curl <destination-ip>:<port>
kubectl exec -it <pod-name> -- nc -zv <destination-ip> <port>

Capture traffic with tcpdump (if supported by the CNI plugin).




---

7. Examine Node-Level Networking

Reason: Issues with node networking (e.g., iptables, routes) can prevent communication.

Action:

Check the routes on the node:

ip route

Inspect iptables rules:

iptables -L -v -n

Restart the kubelet and network plugin on the node if necessary.




---

8. Debug NetworkPolicy with kubectl

Reason: Kubernetes provides a way to test permissions based on NetworkPolicies.

Action:

Use the following to test permissions:

kubectl auth can-i get pods --as=<serviceaccount> -n <namespace>

